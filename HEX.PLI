1%X:  PROCEDURE(HEXSTR) RETURNS(CHAR);

 /*********************************************************************/
 /*                                                                   */
 /* THE PURPOSE OF THIS MACRO IS TO ENABLE THE PROGRAMMER TO REFER TO */
 /* HEX CONSTANTS IN A PL/I PROGRAM.  THE MACRO REFERENCE IS OF THE   */
 /* FORM X(5F) FOR THE CORRESPONDING ASSEMBLER X'5F'.  WHAT IS        */
 /* SUPPLIED TO THE COMPILER IS A BIT STRING '01011111'B.  WHEN USING */
 /* HEX STRINGS FOR IDENTIFIERS WITH ATTRIBUTES OTHER THAN BIT, THE   */
 /* MACRO WILL ALSO ALLOW THE PROGRAMMER TO PLACE THE IDENTIFIER IN A */
 /* MACRO REFERENCE OF THE FORM X(IDENTIFIER).  WHAT IS SUPPLIED TO   */
 /* THE COMPILER IN THIS INSTANCE IS UNSPEC(IDENTIFIER).  THIS        */
 /* FEATURE IS SUPPLIED FOR LOGICAL CONSISTANCY, SO AS TO REFER TO    */
 /* BOTH IDENTIFIER AND CONSTANTS AS HEX DATA RATHER THAN REQUIRING   */
 /* THE PROGRAMMER TO REFER TO ANYTHING AS BIT STRINGS.  THE ONE      */
 /* RESTRICTION ON USING IDENTIFIERS IN THE MACRO REFERENCE IS THAT   */
 /* THE IDENTIFIER HAVE AT LEAST ONE CHARACTER IN ITS NAME THAT COULD */
 /* NOT BE INTERPRETED AS BEING PART OF A HEX CONSTANT.  SO THAT, FOR */
 /* EXAMPLE THE VARIABLE, ABC, WOULD BE WRONGLY INTERPRETED AS        */
 /* '101010111100'B RATHER THAN UNSPEC(ABC).                          */
 /*                                                                   */
 /*********************************************************************/


 DECLARE  HEXSTR  CHAR;
 DECLARE  BITSTR  CHAR;
 DECLARE  (LENGTH, SUBSTR) BUILTIN;
 DECLARE  I  FIXED;

 BITSTR = '';

1DO I = 1 TO LENGTH(HEXSTR);
     IF SUBSTR(HEXSTR, I, 1) = '0'
         THEN BITSTR = BITSTR ]] '0000';
     ELSE IF SUBSTR(HEXSTR, I, 1) = '1'
         THEN BITSTR = BITSTR ]] '0001';
     ELSE IF SUBSTR(HEXSTR, I, 1) = '2'
         THEN BITSTR = BITSTR ]] '0010';
     ELSE IF SUBSTR(HEXSTR, I, 1) = '3'
         THEN BITSTR = BITSTR ]] '0011';
     ELSE IF SUBSTR(HEXSTR, I, 1) = '4'
         THEN BITSTR = BITSTR ]] '0100';
     ELSE IF SUBSTR(HEXSTR, I, 1) = '5'
         THEN BITSTR = BITSTR ]] '0101';
     ELSE IF SUBSTR(HEXSTR, I, 1) = '6'
         THEN BITSTR = BITSTR ]] '0110';
     ELSE IF SUBSTR(HEXSTR, I, 1) = '7'
         THEN BITSTR = BITSTR ]] '0111';
     ELSE IF SUBSTR(HEXSTR, I, 1) = '8'
         THEN BITSTR = BITSTR ]] '1000';
     ELSE IF SUBSTR(HEXSTR, I, 1) = '9'
         THEN BITSTR = BITSTR ]] '1001';
     ELSE IF SUBSTR(HEXSTR, I, 1) = 'A'
         THEN BITSTR = BITSTR ]] '1010';
     ELSE IF SUBSTR(HEXSTR, I, 1) = 'B'
         THEN BITSTR = BITSTR ]] '1011';
     ELSE IF SUBSTR(HEXSTR, I, 1) = 'C'
         THEN BITSTR = BITSTR ]] '1100';
     ELSE IF SUBSTR(HEXSTR, I, 1) = 'D'
         THEN BITSTR = BITSTR ]] '1101';
     ELSE IF SUBSTR(HEXSTR, I, 1) = 'E'
         THEN BITSTR = BITSTR ]] '1110';
     ELSE IF SUBSTR(HEXSTR, I, 1) = 'F'
         THEN BITSTR = BITSTR ]] '1111';
     ELSE DO;
          BITSTR = 'UNSPEC(' ]] HEXSTR ]] ')';
          RETURN(BITSTR);
          END;
     END;

 BITSTR = '''' ]] BITSTR ]] '''B';

 RETURN(BITSTR);
 %END X;
 %ACTIVATE X;
