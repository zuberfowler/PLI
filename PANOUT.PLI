*PROCESS NM;
 PANDIR:  PROCEDURE(PARM) OPTIONS(MAIN) REORDER;
 DECLARE  PGMID    CHAR(34) VARYING STATIC EXTERNAL
     INIT('PANDIR V0.0  BY CLYDE THOMAS ZUBER');
 DECLARE  PLIXOPT  CHAR(8)  VARYING STATIC EXTERNAL INIT('      ');

 /*********************************************************************/
 /*                                                                   */
 /*********************************************************************/


 DECLARE  PARM  CHAR(100) VARYING;

 DECLARE  PANDD5    FILE RECORD INPUT;
 DECLARE  SYSIN     FILE STREAM INPUT;
 DECLARE  SYSPRINT  FILE STREAM OUTPUT PRINT;

 DECLARE  (ADDR, LENGTH, STRING, SUBSTR)  BUILTIN;
 DECLARE  INTOHEX  ENTRY;

 DECLARE  (I, NNN, REC#)  FIXED BINARY;
 DECLARE  #ENTRY  FIXED BINARY;
 DECLARE  NO   BIT(1) STATIC INIT('0'B);
 DECLARE  YES  BIT(1) STATIC INIT('1'B);
 DECLARE  MORE_PANDD   BIT(1) STATIC INIT('1'B);

 DECLARE  DUMPS     CHAR(32760) VARYING;
 DECLARE  RECORD    CHAR(32760) VARYING;
 DECLARE
     1  MEM_REC  UNALIGNED BASED(ADDR(RECORD)),
        2  M_LEN_BASE     FIXED BINARY,
        2  M_LEN          FIXED BINARY,
 DECLARE
     1  LIB_REC  UNALIGNED BASED(ADDR(RECORD)),
        2  L_LEN_BASE     FIXED BINARY,
        2  L_VER          CHAR(2),
        2  L_REL          CHAR(1),
        2  L_MOD          BIT(8),
        2  L_TIME         CHAR(4),
        2  L_DATE         BIT(16),
        2  L_OPEN_LD      FIXED BINARY,
        2  L_CLOSE_LD     FIXED BINARY,
        2  L_BLKSIZE      FIXED BINARY,
        2  L_DUMP1        CHAR(1),
        2  L_BLKS_TRK     BIT(8),
        2  L_DUMP2        CHAR(2),
        2  L_RPT_CNT      FIXED BINARY,
        2  L_LAST_DUMP    BIT(16),
        2  L_OPEN_CR      FIXED BINARY,
        2  L_CLOSE_CR     FIXED BINARY,
        2  L_DUMP3        CHAR(6),
        2  L_PRI_SET      FIXED BINARY,
        2  L_SEC_SET      FIXED BINARY,
        2  L_DIR_SLOTS    FIXED BINARY,
        2  L_ENTRY_BLKS1  FIXED BINARY, /* #BLKS USED FOR NAMES */
        2  L_ENTRY_SETS   FIXED BINARY,
        2  L_SLOTS_TRK    FIXED BINARY,
        2  L_DUMP4        CHAR(2),
        2  L_DIR_BLKS     FIXED BINARY,
        2  L_DATA_BLKS    FIXED BINARY,
        2  L_DUMP5        CHAR(14),
        2  L_BEG_HI_NAMES FIXED BINARY,
        2  L_ENTRY_BLKS2  FIXED BINARY, /* #BLKS USED FOR NAMES */
        2  L_LENGTH1      FIXED BINARY,
        2  L_LENGTH2      FIXED BINARY,
        2  L_HI_NAME(CNT REFER(L_ENTRY_BLKS2))  BIT(64);
 DECLARE
     1  DIR_REC  UNALIGNED BASED(ADDR(RECORD)),
        2  LEN_BASE    FIXED BINARY,
        2  LEN         FIXED BINARY,
        2  COUNT       FIXED BINARY,
        2  HI_NAME     BIT(64),
        2  DIR_ENTRY(#ENTRY REFER(COUNT)),
           3  NAME     BIT(64),
           3  LEVEL    BIT(8),
           3  TYPE     BIT(4),
           3  STATUS   BIT(4),
           3  MAINT    BIT(16),
           3  ACCESS   BIT(16),
           3  USER     FIXED BINARY,
           3  LRECL    FIXED BINARY,
           3  BLOCK    FIXED BINARY,
           3  #BLKS    FIXED BINARY,
           3  FLAGS1   CHAR(4),
           3  #STMTS   BIT(24),
           3  LASTACT  BIT(4),
           3  FLAGS2   BIT(4);

 ON ENDFILE(PANDD5) MORE_PANDD = NO;

 READ FILE(PANDD5) INTO(RECORD);
 REC# = REC# + 1;
 PUT SKIP(2) EDIT('VER', L_VER, '.', L_REL, '.', L_MOD,
     TIME_CONV(L_TIME), DATE_CONV(L_DATE), 'LDOPENED=', L_OPEN_LD,
     'LDCLOSED=', L_CLOSE_LD, 'BLKSIZE=', L_BLKSIZE)
     (A, A, A, A, A, F(1), X(1), A, X(1), A, X(1), A, F(5), X(1), A,
     F(5), X(1), A, F(5));
 CALL INTOHEX(L_DUMP1, DUMPS);
 PUT SKIP EDIT('DUMP1=', DUMPS) (A);

 PUT SKIP EDIT('BLKS/TRK=', L_BLKS_TRK) (A, F(5));
 CALL INTOHEX(L_DUMP2, DUMPS);
 PUT SKIP EDIT('DUMP2=', DUMPS) (A);

 PUT SKIP EDIT('#RPTS=', L_RPT_CNT, 'DUMP=', DATE_CONV(L_LAST_DUMP),
     'COPENED=', L_OPEN_CR, 'CCLOSED=', L_CLOSE_CR)
     (A, F(5), X(1), A, A, X(1), A, F(5), X(1), A, F(5));
 CALL INTOHEX(L_DUMP3, DUMPS);
 PUT SKIP EDIT('DUMP3=', DUMPS) (A);

 PUT SKIP EDIT('PRI SET=', L_PRI_SET, 'SEC SET=', L_SEC_SET,
     'DIR SLOTS=', L_DIR_SLOTS, 'ENT BLKS1=', L_ENTRY_BLKS1,
     'ENT SETS=', L_ENTRY_SETS, 'SLOTS/TRK=', L_SLOTS_TRK)
     (A, F(5), X(1), A, F(5), X(1), A, F(5), X(1), A, F(5), X(1),
      A, F(5), X(1), A, F(5));
 CALL INTOHEX(L_DUMP4, DUMPS);
 PUT SKIP EDIT('DUMP4=', DUMPS) (A);

 PUT SKIP EDIT('DIR BLKS=', L_DIR_BLKS, 'DATA BLKS=', L_DATA_BLKS)
     (A, F(5), X(1), A, F(5));
 CALL INTOHEX(L_DUMP5, DUMPS);
 PUT SKIP EDIT('DUMP5=', DUMPS) (A);

 PUT SKIP EDIT('BEG HI NAMES=', L_BEG_HI_NAMES, 'ENT BLKS2=',
     L_ENTRY_BLKS2, 'LENGTH1=', L_LENGTH1, 'LENGTH2=', L_LENGTH2)
     (A, F(5), X(1), A, F(5), X(1), A, F(5), X(1), A, F(5), X(1));

 PUT SKIP;
 DO I = 1 TO L_ENTRY_BLKS2;
    PUT EDIT(NAME_CONV(L_HI_NAME(I))) (A, X(1));
    END;

 READ FILE(PANDD5) INTO(RECORD);
 REC# = REC# + 1;
 DO WHILE(MORE_PANDD);
     PUT SKIP(2) EDIT('LENGTH=', LEN, 'COUNT=', COUNT, 'HINAME=',
         NAME_CONV(HI_NAME)) (A, F(4), X(3), A, F(4), X(3), A, A);

     /* TEMPORARY */
     PUT SKIP(2) EDIT('PROCESS RECORD', REC#, '?') (A, F(3), A);
     PUT SKIP EDIT('0=NO, 1=YES, 2=DUMP, 3=STOP') (A);
     GET LIST(NNN);
     IF NNN = 3
         THEN RETURN;
     ELSE IF NNN = 2
         THEN DO;
              CALL INTOHEX(RECORD, DUMPS);
              PUT SKIP(2) EDIT(DUMPS) (A);
              END;
     ELSE IF NNN = 1
         THEN

     DO I = 1 TO COUNT;
         PUT SKIP(2) EDIT(NAME_CONV(NAME(I)), LEVEL(I), USER(I),
             TYPE_CONV(TYPE(I)), STATUS_CONV(STATUS(I)),
             DATE_CONV(MAINT(I)), DATE_CONV(ACCESS(I)), #BLKS(I),
             #STMTS(I), LASTACT_CONV(LASTACT(I)))
             (A, X(1), F(3), X(1), F(5), X(1), A, X(1), A, X(1), A,
             X(1), A, X(1), F(5), X(1), F(8), X(1), A);
         CALL INTOHEX(FLAGS1(I), DUMPS);
         PUT SKIP EDIT(LRECL(I), BLOCK(I), DUMPS, FLAGS2)
             (F(5), X(1), F(5), X(1), A, X(1), B);
         END;
     READ FILE(PANDD5) INTO(RECORD);
     REC# = REC# + 1;
     END;

 /*********************************************************************/
 /* LOGICAL END OF PROGRAM FLOW.                                      */
 /*********************************************************************/
1LASTACT_CONV:  PROCEDURE(BITSTR) RETURNS(CHAR(3));

 /*********************************************************************/
 /*                                                                   */
 /*                                                                   */
 /*********************************************************************/

 DECLARE  BITSTR   BIT(*);

 SELECT(BITSTR);
     WHEN('0000'B) RETURN('   ');
     WHEN('0001'B) RETURN('ADD');
     WHEN('0011'B) RETURN('UPD');
     WHEN('0100'B) RETURN('REN');
     WHEN('0110'B) RETURN('LEV');
     WHEN('1101'B) RETURN('COM');
     OTHERWISE DO;
         PUT SKIP EDIT('LASTACT=', BITSTR) (A, B);
         RETURN('   ');
         END;
     END;

 END LASTACT_CONV;
1TYPE_CONV:  PROCEDURE(BITSTR) RETURNS(CHAR(3));

 /*********************************************************************/
 /*                                                                   */
 /*                                                                   */
 /*********************************************************************/

 DECLARE  BITSTR   BIT(*);

 SELECT(BITSTR);
     WHEN('0010'B) RETURN('ASM');
     WHEN('0011'B) RETURN('COB');
     WHEN('0101'B) RETURN('FOR');
     WHEN('0110'B) RETURN('PLI');
     WHEN('1000'B) RETURN('OBJ');
     WHEN('1010'B) RETURN('DAT');
     WHEN('1001'B) RETURN('JCL');
     WHEN('1011'B) RETURN('OTH');
     OTHERWISE DO;
         PUT SKIP EDIT('TYPE=', BITSTR) (A, B);
         RETURN('   ');
         END;
     END;

 END TYPE_CONV;
1STATUS_CONV:  PROCEDURE(BITSTR) RETURNS(CHAR(5));

 /*********************************************************************/
 /*                                                                   */
 /*                                                                   */
 /*********************************************************************/

 DECLARE  BITSTR   BIT(*);

 DECLARE  STATUS  CHAR(5) INIT('  TEA');
 DECLARE
     1  STBITS,
        2  TSO         BIT(1),
        2  DISABLED    BIT(1),
        2  INACTIVE    BIT(1),
        2  PRODUCTION  BIT(1);

 STRING(STBITS) = BITSTR;
 IF TSO
     THEN SUBSTR(STATUS, 1, 1) = 'T';
 IF DISABLED
     THEN SUBSTR(STATUS, 4, 1) = 'D';
 IF INACTIVE
     THEN SUBSTR(STATUS, 5, 1) = 'I';
 IF PRODUCTION
     THEN SUBSTR(STATUS, 3, 1) = 'P';

 RETURN(STATUS);

 END STATUS_CONV;
1TIME_CONV:  PROCEDURE(STR) RETURNS(CHAR(11));

 /*********************************************************************/
 /*                                                                   */
 /*                                                                   */
 /*********************************************************************/

 DECLARE  STR  CHAR(*);
 DECLARE  CONVSTR  CHAR(8);
 DECLARE  RETTIME  CHAR(11);

 CALL INTOHEX(STR, CONVSTR);
 RETTIME = SUBSTR(CONVSTR, 1, 2) || '.' || SUBSTR(CONVSTR, 3, 2) || '.'
     || SUBSTR(CONVSTR, 5, 2) || '.' || SUBSTR(CONVSTR, 7, 2);
 RETURN(RETTIME);

 END TIME_CONV;
1DATE_CONV:  PROCEDURE(BITSTR) RETURNS(CHAR(8));

 /*********************************************************************/
 /*                                                                   */
 /*                                                                   */
 /*********************************************************************/

 DECLARE  BITSTR   BIT(*);
 DECLARE  RETDATE  CHAR(8);
 DECLARE
     1  PANDATE,
        2  YEAR1   BIT(3),
        2  YEAR2   BIT(4),
        2  MONTH   BIT(4),
        2  DAY     BIT(5);
 DECLARE
     1  CONVDATE  STATIC,
        2  MM      CHAR(2),
        2  S1      CHAR(1) INIT('/'),
        2  DD      CHAR(2),
        2  S2      CHAR(1) INIT('/'),
        2  Y1      CHAR(1),
        2  Y2      CHAR(1);

 STRING(PANDATE) = BITSTR;
 MM = DEC_DATE(MONTH);
 DD = DEC_DATE(DAY);
 Y2 = SUBSTR(DEC_DATE(YEAR2), 2, 1);
 SELECT(YEAR1);
     WHEN('000'B) Y1 = ' ';
     WHEN('101'B) Y1 = '8';
     OTHERWISE DO;
         Y1 = 'X';
         PUT SKIP DATA(YEAR1);
         END;
     END;

 RETDATE = STRING(CONVDATE);
 RETURN(RETDATE);

 END DATE_CONV;
1DEC_DATE:  PROCEDURE(BITS) RETURNS(CHAR(2));

 /*********************************************************************/
 /*                                                                   */
 /*                                                                   */
 /*********************************************************************/

 DECLARE  BITS    BIT(*);
 DECLARE  BITSTR  BIT(8);
 DECLARE  DEC     CHAR(2);

 IF LENGTH(BITS) < 8
     THEN BITSTR = SUBSTR('00000000'B, 1, 8-LENGTH(BITS)) || BITS;
     ELSE BITSTR = BITS;

 SELECT(BITSTR);
     WHEN('00000000'B) DEC = ' 0';
     WHEN('00000001'B) DEC = ' 1';
     WHEN('00000010'B) DEC = ' 2';
     WHEN('00000011'B) DEC = ' 3';
     WHEN('00000100'B) DEC = ' 4';
     WHEN('00000101'B) DEC = ' 5';
     WHEN('00000110'B) DEC = ' 6';
     WHEN('00000111'B) DEC = ' 7';
     WHEN('00001000'B) DEC = ' 8';
     WHEN('00001001'B) DEC = ' 9';
     WHEN('00001010'B) DEC = '10';
     WHEN('00001011'B) DEC = '11';
     WHEN('00001100'B) DEC = '12';
     WHEN('00001101'B) DEC = '13';
     WHEN('00001110'B) DEC = '14';
     WHEN('00001111'B) DEC = '15';
     WHEN('00010000'B) DEC = '16';
     WHEN('00010001'B) DEC = '17';
     WHEN('00010010'B) DEC = '18';
     WHEN('00010011'B) DEC = '19';
     WHEN('00010100'B) DEC = '20';
     WHEN('00010101'B) DEC = '21';
     WHEN('00010110'B) DEC = '22';
     WHEN('00010111'B) DEC = '23';
     WHEN('00011000'B) DEC = '24';
     WHEN('00011001'B) DEC = '25';
     WHEN('00011010'B) DEC = '26';
     WHEN('00011011'B) DEC = '27';
     WHEN('00011100'B) DEC = '28';
     WHEN('00011101'B) DEC = '29';
     WHEN('00011110'B) DEC = '30';
     WHEN('00011111'B) DEC = '31';
     OTHERWISE DEC = 'XX';
     END;


 RETURN(DEC);

 END DEC_DATE;
1NAME_CONV:  PROCEDURE(BITSTR) RETURNS(CHAR(10) VARYING);

 /*********************************************************************/
 /*                                                                   */
 /*********************************************************************/

 DECLARE  BITSTR  BIT(*);
 DECLARE  I       FIXED BINARY;
 DECLARE  NAME    CHAR(10) VARYING INIT('');

 DO I = 0 TO 9;
     SELECT(SUBSTR(BITSTR, I*6+1, 6));
         WHEN('000000'B) NAME = NAME || ' ';
         WHEN('000001'B) NAME = NAME || 'A';
         WHEN('000010'B) NAME = NAME || 'B';
         WHEN('000011'B) NAME = NAME || 'C';
         WHEN('000100'B) NAME = NAME || 'D';
         WHEN('000101'B) NAME = NAME || 'E';
         WHEN('000110'B) NAME = NAME || 'F';
         WHEN('000111'B) NAME = NAME || 'G';
         WHEN('001000'B) NAME = NAME || 'H';
         WHEN('001001'B) NAME = NAME || 'I';
         WHEN('010001'B) NAME = NAME || 'J';
         WHEN('010010'B) NAME = NAME || 'K';
         WHEN('010011'B) NAME = NAME || 'L';
         WHEN('010100'B) NAME = NAME || 'M';
         WHEN('010101'B) NAME = NAME || 'N';
         WHEN('010110'B) NAME = NAME || 'O';
         WHEN('010111'B) NAME = NAME || 'P';
         WHEN('011000'B) NAME = NAME || 'Q';
         WHEN('011001'B) NAME = NAME || 'R';
         WHEN('100010'B) NAME = NAME || 'S';
         WHEN('100011'B) NAME = NAME || 'T';
         WHEN('100100'B) NAME = NAME || 'U';
         WHEN('100101'B) NAME = NAME || 'V';
         WHEN('100110'B) NAME = NAME || 'W';
         WHEN('100111'B) NAME = NAME || 'X';
         WHEN('101000'B) NAME = NAME || 'Y';
         WHEN('101001'B) NAME = NAME || 'Z';
         WHEN('110000'B) NAME = NAME || '0';
         WHEN('110001'B) NAME = NAME || '1';
         WHEN('110010'B) NAME = NAME || '2';
         WHEN('110011'B) NAME = NAME || '3';
         WHEN('110100'B) NAME = NAME || '4';
         WHEN('110101'B) NAME = NAME || '5';
         WHEN('110110'B) NAME = NAME || '6';
         WHEN('110111'B) NAME = NAME || '7';
         WHEN('111000'B) NAME = NAME || '8';
         WHEN('111001'B) NAME = NAME || '9';
         OTHERWISE DO;
             PUT SKIP EDIT('UNDEFINED:  ', BITSTR) (A, B(6));
             NAME = NAME || '?';
             END;
         END;
     END;

 RETURN(NAME);

 END NAME_CONV;
 /* @ PROCEDURES IN DEVELOPMENT */
1PUTOUT:  PROCEDURE(OUT, REC);

 /*********************************************************************/
 /*                                                                   */
 /*********************************************************************/


 DECLARE  OUT     FILE VARIABLE;
 DECLARE  REC     CHAR(80) VARYING;

 IF LENGTH(REC) < 80
     THEN RETURN;
 WRITE FILE(OUT) FROM(REC);
 REC = '';

 END;
1RECONSTRUCT:  PROCEDURE(OUT);

 /*********************************************************************/
 /*                                                                   */
 /*********************************************************************/


 DECLARE  OUT     FILE VARIABLE;

 DECLARE  REC     CHAR(80) VARYING INIT('');
 DECLARE  ENDPOS  FIXED BINARY(31);

 DECLARE  LPTR    PTR;
 DECLARE  LPOS    FIXED BINARY(31) BASED(ADDR(LPTR));
 DECLARE  NPTR    PTR;
 DECLARE  NPOS    FIXED BINARY(31) BASED(ADDR(NPTR));
 DECLARE  CPTR    PTR;
 DECLARE  CPOS    FIXED BINARY(31) BASED(ADDR(CPTR));

 DECLARE  LEN     FIXED BINARY BASED(LPTR);
 DECLARE  NEXT    FIXED BINARY BASED(NPTR);
 DECLARE  CODE    BIT(8)  BASED(CPTR);

 /* STATIC INIT */
 LPTR = ADDR(RECORD);
 LPOS = LPOS + 2;
 NPOS = LPOS + 2;

 CPOS = LPOS + 7;
 ENDPOS = LPOS + LEN;
 DO WHILE(CPOS < ENDPOS);
     REC = REC || SUBSTR(RECORD, CPOS-LPOS+2, SKIP+1);
     CALL PUTOUT(OUT, REC);


 END RECONSTRUCT;
1SP:  PROCEDURE(CODE) RETURNS(CHAR(80) VARYING);

 /*********************************************************************/
 /*                                                                   */
 /*********************************************************************/


 DECLARE  CODE  BIT(8);
 DECLARE  BLANKSTR  CHAR(80) VARYING STATIC INIT((80)' ');
 DECLARE  BLANKLEN  FIXED BINARY BASED(ADDR(BLANKSTR));

 BLANKLEN = CODE - 127;
 RETURN(BLANKSTR);

 END SP;

 END PANDIR;
