*PROCESS;
 RECON:  PROCEDURE OPTIONS(MAIN) REORDER;
 DECLARE  PGMID  CHAR(33) VARYING STATIC EXTERNAL
     INIT('RECON V3.0  BY CLYDE THOMAS ZUBER');
 DECLARE  PLIXOPT CHAR(9) VARYING STATIC EXTERNAL INIT('ISA(128K)');

 /*********************************************************************/
 /*                                                                   */
 /* RECON IS A PROGRAM WHICH TAKES DATA SETS WHICH CONTAIN OTHER      */
 /* DATA SETS AND ATTEMPTS TO RECONSTRUCT THE INCLUDED DATA SET BACK  */
 /* TO IT'S ORIGINAL FORM.  THIS HAPPENS WITH FDRDSF DATA SETS,       */
 /* IEHMOVE DATA SETS AND OTHER UTILITY PROCESSED INFORMATION.        */
 /*                                                                   */
 /*********************************************************************/


 DECLARE
     1  IN_PARM,
        2  I_RECFM,
           3  I_FIXED      BIT(1),
           3  I_VARIABLE   BIT(1),
           3  I_UNDEFINED  BIT(1),
           3  I_BLOCKED    BIT(1),
           3  I_SPANNED    BIT(1),
           3  I_A_CNTL     BIT(1),
           3  I_M_CNTL     BIT(1),
           3  I_TRK_OVFL   BIT(1),
        2  I_LRECL    FIXED BINARY,
        2  I_BLKSIZE  FIXED BINARY;

 DECLARE
     1  OUT_PARM  STATIC,
        2  O_RECFM,
           3  O_FIXED      BIT(1) INIT('0'B),
           3  O_VARIABLE   BIT(1) INIT('0'B),
           3  O_UNDEFINED  BIT(1) INIT('0'B),
           3  O_BLOCKED    BIT(1) INIT('0'B),
           3  O_SPANNED    BIT(1) INIT('0'B),
           3  O_A_CNTL     BIT(1) INIT('0'B),
           3  O_M_CNTL     BIT(1) INIT('0'B),
           3  O_TRK_OVFL   BIT(1) INIT('0'B),
        2  O_LRECL    FIXED BINARY INIT(0),
        2  O_BLKSIZE  FIXED BINARY INIT(0);
1/* FILE DECLARATIONS */
 DECLARE  IN        FILE INPUT  BUFFERED RECORD;
 DECLARE  OUT       FILE OUTPUT ENV(FB RECSIZE(80) BLKSIZE(3120));
 DECLARE  SYSIN     FILE INPUT  STREAM;
 DECLARE  SYSPRINT  FILE OUTPUT STREAM PRINT;

 /* EXTERNAL ROUTINES */
 DECLARE  (HBOUND, INDEX, LENGTH, ONSOURCE, SUBSTR, UNSPEC)  BUILTIN;
 DECLARE  (GETDCB, PUTDCB)  ENTRY;
 DECLARE  LINDEX  ENTRY RETURNS(FIXED BINARY(31)); /* REALLY ASM */
 DECLARE  VERIFY  ENTRY RETURNS(FIXED BINARY(31)); /* REALLY ASM */

 /* CONSTANTS */
 DECLARE  C_BLKSIZE   CHAR(7) STATIC INIT('BLKSIZE');
 DECLARE  C_CANCEL    CHAR(6) STATIC INIT('CANCEL');
 DECLARE  C_END       CHAR(3) STATIC INIT('END');
 DECLARE  C_EXCESS    CHAR(6) STATIC INIT('EXCESS');
 DECLARE  C_FDRDSF    CHAR(6) STATIC INIT('FDRDSF');
 DECLARE  C_FINISH    CHAR(6) STATIC INIT('FINISH');
 DECLARE  C_HELP      CHAR(4) STATIC INIT('HELP');
 DECLARE  C_IEHMOVE   CHAR(7) STATIC INIT('IEHMOVE');
 DECLARE  C_LRECL     CHAR(5) STATIC INIT('LRECL');
 DECLARE  C_RECFM     CHAR(5) STATIC INIT('RECFM');
 DECLARE  C_SEQLEN    CHAR(6) STATIC INIT('SEQLEN');
 DECLARE  C_START     CHAR(5) STATIC INIT('START');
 DECLARE  C_TRIM      CHAR(4) STATIC INIT('TRIM');
 DECLARE  C_VAR       CHAR(3) STATIC INIT('VAR');
 DECLARE  C_VERIFY    CHAR(6) STATIC INIT('VERIFY');
 DECLARE  LETTERS     CHAR(26) VARYING STATIC
                      INIT('ABCDEFGHIJKLMNOPQRSTUVWXYZ');
 DECLARE  NO          BIT(1)  STATIC INIT('0'B);
 DECLARE  NUMS        CHAR(10) VARYING STATIC INIT('0123456789');
 DECLARE  QUOTE       CHAR(1) STATIC INIT('''');
 DECLARE  YES         BIT(1)  STATIC INIT('1'B);
1/* IDENTIFIERS */
 DECLARE  ANSW        CHAR(30);
 DECLARE  BLKSIZE     FIXED BINARY STATIC INIT(3120);
 DECLARE  CALL_SEQ    BIT(1) STATIC INIT('1'B);
 DECLARE  CH_RECFM    CHAR(4) STATIC INIT(' ');
 DECLARE  EXCESS      BIT(1) INIT('0'B) STATIC;
 DECLARE  FINISH      FIXED BINARY(31) STATIC INIT(0);
 DECLARE  FIRST_COL   FIXED BINARY(31) STATIC INIT(0);
 DECLARE  I           FIXED BINARY;
 DECLARE  ICOUNT      FIXED BINARY(31) STATIC INIT(0);
 DECLARE  IMAX        FIXED BINARY(31) STATIC INIT(0);
 DECLARE  IMIN        FIXED BINARY(31) STATIC INIT(32766);
 DECLARE  IPR_RECFM   CHAR(7) VARYING INIT('');
 DECLARE  LAST_COL    FIXED BINARY(31) STATIC INIT(0);
 DECLARE  LEN         PIC '(4)9' STATIC;
 DECLARE  LENGTH_REC  FIXED BINARY;
 DECLARE  LRECL       FIXED BINARY STATIC INIT(80);
 DECLARE  MORE_SYSIN  BIT(1) STATIC INIT('1'B);
 DECLARE  MORE_IN     BIT(1) STATIC INIT('1'B);
 DECLARE  NNN         FIXED BINARY(31) INIT(0);
 DECLARE  OCOUNT      FIXED BINARY(31) STATIC INIT(0);
 DECLARE  OMAX        FIXED BINARY(31) STATIC INIT(0);
 DECLARE  OMIN        FIXED BINARY(31) STATIC INIT(32766);
 DECLARE  OPR_RECFM   CHAR(8) VARYING INIT('');
 DECLARE  OUTREC      CHAR(80) CONTROLLED;
 DECLARE  REC         CHAR(32760) VARYING;
 DECLARE  SEQLEN      FIXED BINARY STATIC INIT(8);
 DECLARE  START       FIXED BINARY(31) STATIC INIT(1);
 DECLARE  V_OUTREC    CHAR(80) VARYING CONTROLLED;
 DECLARE  VAR         BIT(1) INIT('0'B) STATIC;
 DECLARE  VERIFY_EX   BIT(1) INIT('0'B) STATIC;
 DECLARE  WRKVAR      CHAR(32760) VARYING;
1ON ENDFILE(IN) MORE_IN = NO;

 /* PROCESS USER INPUT FROM SYSIN CONTROL */
 CALL CONTROL;

 /* FIND INPUT DCB ATTRIBUTES */
 CALL GETDCB(IN, IN_PARM);

 /* SET OUTPUT DCB ATTRIBUTES */

 /* SET RECFM TO DESIRED TYPE */
 IF CH_RECFM = ' '
     THEN DO;
          O_FIXED = YES;
          O_BLOCKED = YES;
          END;
     ELSE DO I = 1 TO 4;
              SELECT(SUBSTR(CH_RECFM, I, 1));
                  WHEN(' ');
                  WHEN('F') O_FIXED = YES;
                  WHEN('V') O_VARIABLE = YES;
                  WHEN('U') O_UNDEFINED = YES;
                  WHEN('B') O_BLOCKED = YES;
                  WHEN('S') O_SPANNED = YES;
                  WHEN('A') O_A_CNTL = YES;
                  WHEN('M') O_M_CNTL = YES;
                  WHEN('T') O_TRK_OVFL = YES;
                  OTHERWISE DO;
                      PUT SKIP EDIT('INVALID RECFM:  ', CH_RECFM) (A);
                      RETURN;
                      END;
                  END;
              END;

 O_LRECL = LRECL;
 O_BLKSIZE = BLKSIZE;
1/* REPORT DATA SET ATTRIBUTES */
 SELECT;
     WHEN(I_FIXED) IPR_RECFM = IPR_RECFM || 'F';
     WHEN(I_VARIABLE) IPR_RECFM = IPR_RECFM || 'V';
     WHEN(I_UNDEFINED) IPR_RECFM = IPR_RECFM || 'U';
     END;
 IF I_BLOCKED
     THEN IPR_RECFM = IPR_RECFM || 'B';
 IF I_SPANNED
     THEN IPR_RECFM = IPR_RECFM || 'S';
 IF I_TRK_OVFL
     THEN IPR_RECFM = IPR_RECFM || 'T';
 IF I_A_CNTL
     THEN IPR_RECFM = IPR_RECFM || 'A';
 IF I_M_CNTL
     THEN IPR_RECFM = IPR_RECFM || 'M';
 DO WHILE(LENGTH(IPR_RECFM) < 7);
     IPR_RECFM = ' ' || IPR_RECFM;
     END;

 SELECT;
     WHEN(O_FIXED) OPR_RECFM = OPR_RECFM || 'F';
     WHEN(O_VARIABLE) OPR_RECFM = OPR_RECFM || 'V';
     WHEN(O_UNDEFINED) OPR_RECFM = OPR_RECFM || 'U';
     END;
 IF O_BLOCKED
     THEN OPR_RECFM = OPR_RECFM || 'B';
 IF O_SPANNED
     THEN OPR_RECFM = OPR_RECFM || 'S';
 IF O_TRK_OVFL
     THEN OPR_RECFM = OPR_RECFM || 'T';
 IF O_A_CNTL
     THEN OPR_RECFM = OPR_RECFM || 'A';
 IF O_M_CNTL
     THEN OPR_RECFM = OPR_RECFM || 'M';
 DO WHILE(LENGTH(OPR_RECFM) < 8);
     OPR_RECFM = ' ' || OPR_RECFM;
     END;

 PUT SKIP EDIT('     IN     OUT') (A);
 PUT SKIP EDIT('  =====   =====') (A);
 PUT SKIP EDIT(IPR_RECFM, OPR_RECFM, '  RECFM') (A);
 PUT SKIP EDIT(I_LRECL, O_LRECL, '  LRECL') (F(7), F(8), A);
 PUT SKIP EDIT(I_BLKSIZE, O_BLKSIZE, '  BLKSIZE') (F(7), F(8), A);
1/* SET OUTPUT DCB ATTRIBUTES */
 CALL PUTDCB(OUT, OUT_PARM);

 /* SKIP TO FIRST DESIRED RECORD */
 DO WHILE(ICOUNT < START);
     CALL GETIN;
     END;

 IF O_VARIABLE
     THEN DO;
          ALLOCATE V_OUTREC CHAR(LRECL-4);
          CALL RECLAIM_V;
          END;
     ELSE DO;
          ALLOCATE OUTREC CHAR(LRECL);
          OMAX = LRECL;
          OMIN = LRECL;
          CALL RECLAIM_F;
          END;

 /* REPORT GATHERED STATISTICS */

 PUT SKIP EDIT(ICOUNT, OCOUNT, '  RECORDS PROCESSED') (F(7), F(8), A);

 /* MIN/MAX RECORD LENGTH */
 IF O_VARIABLE  |  I_VARIABLE
     THEN DO;
          PUT SKIP EDIT(IMIN, OMIN, '  MIN LENGTH') (F(7), F(8), A);
          PUT SKIP EDIT(IMAX, OMAX, '  MAX LENGTH') (F(7), F(8), A);
          END;

 /*********************************************************************/
 /* LOGICAL END OF PROGRAM FLOW.                                      */
 /*********************************************************************/
1RECLAIM_F:  PROCEDURE;

 /*********************************************************************/
 /*                                                                   */
 /* THIS PROCEDURE DOES THE ACTUAL RECONSTRUCTION OF A FIXED RECORD   */
 /* FORMAT DATA SET THAT HAS BEEN MESSED UP.                          */
 /*                                                                   */
 /*********************************************************************/


 DECLARE  SEQ_POS  FIXED BINARY;
1DO WHILE(MORE_IN & (ICOUNT ª= FINISH));

     LENGTH_REC = LENGTH(REC);
     IF CALL_SEQ
         THEN SEQ_POS = SEQ(REC, SEQLEN);

     IF SEQ_POS > LRECL
         THEN DO;
              WRKVAR = SUBSTR(REC, 1, SEQ_POS-LRECL);
              IF VERIFY_EX
                   THEN IF LINDEX(WRKVAR, LETTERS) = 0
                            THEN PUT SKIP EDIT(WRKVAR)(A);
                            ELSE IF EXCESS
                                     THEN DO;
                                          OUTREC = WRKVAR;
                                          CALL PUTOUT;
                                          END;
                                     ELSE PUT SKIP EDIT(WRKVAR)(A);
                   ELSE IF EXCESS
                            THEN DO;
                                 OUTREC = WRKVAR;
                                 CALL PUTOUT;
                                 END;
              REC = SUBSTR(REC, SEQ_POS-(LRECL-1));
              SEQ_POS = LRECL;
              END;

     IF SEQ_POS > LENGTH_REC
         THEN OUTREC = SUBSTR(REC, 1);
         ELSE OUTREC = SUBSTR(REC, 1, SEQ_POS);

     CALL PUTOUT;

     IF SEQ_POS+1 > LENGTH_REC
         THEN CALL GETIN;
         ELSE REC = SUBSTR(REC, SEQ_POS+1);
     END;

 END RECLAIM_F;
1RECLAIM_V:  PROCEDURE;

 /*********************************************************************/
 /*                                                                   */
 /* THIS PROCEDURE DOES THE ACTUAL RECONSTRUCTION OF A VARIABLE       */
 /* RECORD FORMAT DATA SET THAT HAS BEEN MESSED UP.                   */
 /*                                                                   */
 /*********************************************************************/


 DECLARE  PRE_SEQ  FIXED BINARY;

 DO WHILE(MORE_IN & (ICOUNT ª= FINISH));

     LENGTH_REC = LENGTH(REC);
     PRE_SEQ = SEQ(REC, SEQLEN) - SEQLEN;

     IF PRE_SEQ > 0
         THEN DO;
              IF PRE_SEQ + SEQLEN = LENGTH_REC
                  THEN PRE_SEQ = LENGTH_REC;
              IF VERIFY_EX
                   THEN DO;
                        WRKVAR = SUBSTR(REC, 1, PRE_SEQ);
                        IF LINDEX(WRKVAR, LETTERS) = 0
                            THEN PUT SKIP EDIT(WRKVAR)(A);
                            ELSE IF EXCESS
                                     THEN DO;
                                          V_OUTREC = WRKVAR;
                                          CALL PUTOUT;
                                          END;
                                     ELSE PUT SKIP EDIT(WRKVAR)(A);
                        END;
                   ELSE IF EXCESS
                            THEN DO;
                                 V_OUTREC = WRKVAR;
                                 CALL PUTOUT;
                                 END;
              END;
1        ELSE DO;
              IF VAR & (VERIFY(SUBSTR(REC, 1, SEQLEN), NUMS) = 0)
                  THEN DO;
                       LEN = SUBSTR(REC, 1, SEQLEN);
                       PRE_SEQ = LEN - SEQLEN;
                       REC = SUBSTR(REC, SEQLEN+1);
                       LENGTH_REC = LENGTH_REC - SEQLEN;
                       END;
                  ELSE PRE_SEQ = SEQ(SUBSTR(REC, SEQLEN+1), SEQLEN);

              IF PRE_SEQ > LENGTH_REC
                  THEN V_OUTREC = SUBSTR(REC, 1);
                  ELSE V_OUTREC = SUBSTR(REC, 1, PRE_SEQ);

              CALL PUTOUT;
              END;

     IF PRE_SEQ+1 > LENGTH_REC
         THEN CALL GETIN;
         ELSE REC = SUBSTR(REC, PRE_SEQ+1);
     END;

 END RECLAIM_V;
1GETIN:  PROCEDURE;

 /*********************************************************************/
 /*                                                                   */
 /* THIS PROCEDURE DOES ALL INPUT FROM FILE(IN).                      */
 /*                                                                   */
 /*********************************************************************/


 CALL_SEQ = YES;

 READ FILE(IN) INTO(REC);

 IF MORE_IN
     THEN DO;
          ICOUNT = ICOUNT + 1;

          IF LENGTH(REC) > IMAX
              THEN IMAX = LENGTH(REC);
          IF LENGTH(REC) < IMIN
              THEN IMIN = LENGTH(REC);

          IF LAST_COL - FIRST_COL > 0
              THEN REC = SUBSTR(REC, FIRST_COL, LAST_COL);
          END;

 END GETIN;
1PUTOUT:  PROCEDURE;

 /*********************************************************************/
 /*                                                                   */
 /* THIS PROCEDURE DOES ALL OUTPUT TO FILE(OUT).                      */
 /*                                                                   */
 /*********************************************************************/


 IF O_VARIABLE
     THEN DO;
          WRITE FILE(OUT) FROM(V_OUTREC);
          IF LENGTH(V_OUTREC) > OMAX
              THEN OMAX = LENGTH(V_OUTREC);
          IF LENGTH(V_OUTREC) < OMIN
              THEN OMIN = LENGTH(V_OUTREC);
          END;
     ELSE PUT FILE(OUT) EDIT(OUTREC) (A);

 OCOUNT = OCOUNT + 1;

 END PUTOUT;
1SEQ:  PROCEDURE(REC, WIDTH) RETURNS(FIXED BINARY);

 /*********************************************************************/
 /*                                                                   */
 /* THIS PROCEDURE RETURNS THE LAST POSITION OF THE FIRST SEQ NUMBER  */
 /* IT FINDS.                                                         */
 /*                                                                   */
 /*********************************************************************/


 DECLARE  REC       CHAR(32760) VARYING;

 DECLARE  WIDTH     FIXED BINARY;

 DECLARE  (I, J)    FIXED BINARY(31);

 DECLARE  LETTER    CHAR(1) VARYING;

 DECLARE  STARTPOS  FIXED BINARY;
1STARTPOS = 1;

 FIND_SEQ:  /* LOOP UNTIL WHOLE RECORD SEARCHED OR SEQ NUMBER FOUND */
 DO WHILE(STARTPOS < LENGTH_REC);

     WRKVAR = SUBSTR(REC, STARTPOS);
     I = LINDEX(WRKVAR, NUMS);
     IF I = 0
         THEN DO;
              CALL_SEQ = NO;
              IF O_VARIABLE
                  THEN RETURN(LENGTH_REC);
                  ELSE RETURN(LRECL);
              END;

     IF (STARTPOS+I-2 > 0) & (SUBSTR(REC, STARTPOS+I-2, 1) = QUOTE)
         THEN DO;
              J = VERIFY(SUBSTR(REC, STARTPOS+1), NUMS);
              IF J = 0
                  THEN IF O_VARIABLE
                           THEN RETURN(LENGTH_REC);
                           ELSE RETURN(LRECL);
              STARTPOS = STARTPOS + I + J - 1;
              END;
         ELSE DO;
              IF LENGTH_REC > STARTPOS+I+WIDTH-3
                  THEN J = VERIFY(SUBSTR(REC,STARTPOS+I,WIDTH-1), NUMS);
                  ELSE IF O_VARIABLE
                           THEN RETURN(LENGTH_REC);
                           ELSE RETURN(LRECL);
              IF J = 0
                  THEN DO;
                       IF LENGTH_REC > STARTPOS+I+WIDTH-2
                           THEN LETTER=SUBSTR(REC,STARTPOS+I+WIDTH-1,1);
                           ELSE RETURN(STARTPOS+I+WIDTH-2);
                       J = VERIFY(LETTER, NUMS);
                       IF J ª= 1 | LETTER = QUOTE
                           THEN STARTPOS = STARTPOS + I + WIDTH;
                           ELSE RETURN(STARTPOS+I+WIDTH-2);
                       END;
                  ELSE STARTPOS = STARTPOS + I + J - 1;
              END;
     END FIND_SEQ;

 IF O_VARIABLE
     THEN RETURN(LENGTH_REC);
     ELSE RETURN(LRECL);

 END SEQ;
1CONTROL:  PROCEDURE;

 /*********************************************************************/
 /*                                                                   */
 /* THIS PROCEDURE SETS THE PROCESSING OPTIONS FROM THE SYSIN CONTROL */
 /* FILE INPUT.  IF SYSIN UNDEFINED DEFAULT PROCESSING CONTINUES.     */
 /*                                                                   */
 /*********************************************************************/


 PUT SKIP EDIT(PGMID) (A);
 PUT SKIP EDIT('   ENTER ''HELP'' FOR INFORMATION') (A);

 CALL GETINPT;

 CONTROL_LOOP:  /* ALLOW USER TO SPECIFY OPTIONS AS DESIRED */
 DO WHILE(MORE_SYSIN  &  ANSW ª= C_END);
     SELECT(ANSW);
         WHEN(C_BLKSIZE) DO;
             GET LIST(BLKSIZE);
             PUT EDIT(BLKSIZE, ' ') (F(7), A);
             END;
         WHEN(C_CANCEL) EXIT;
         WHEN(C_EXCESS) EXCESS = YES;
         WHEN(C_FDRDSF) START = 4;
         WHEN(C_FINISH) DO;
             GET LIST(FINISH);
             PUT EDIT(FINISH, ' ') (F(7), A);
             END;
         WHEN(C_HELP) CALL HELP;
         WHEN(C_IEHMOVE) DO;
             FIRST_COL = 3;
             LAST_COL = 80;
             END;
         WHEN(C_LRECL) DO;
             GET LIST(LRECL);
             PUT EDIT(LRECL, ' ') (F(7), A);
             END;
         WHEN(C_RECFM) DO;
             CALL GETINPT;
             CH_RECFM = ANSW;
             END;
1        WHEN(C_SEQLEN) DO;
             GET LIST(SEQLEN);
             PUT EDIT(SEQLEN, ' ') (F(7), A);
             END;
         WHEN(C_START) DO;
             GET LIST(START);
             PUT EDIT(START, ' ') (F(7), A);
             END;
         WHEN(C_TRIM) DO;
             GET LIST(FIRST_COL);
             GET LIST(LAST_COL);
             PUT EDIT(FIRST_COL, ' ', LAST_COL, ' ') (F(7), A);
             END;
         WHEN(C_VAR) DO;
             CH_RECFM = 'VB';
             SEQLEN = 4;
             VAR = YES;
             END;
         WHEN(C_VERIFY) VERIFY_EX = YES;
         OTHERWISE PUT SKIP(2) EDIT('COMMAND UNRECOGNIZED, REENTER')(A);
         END;

     CALL GETINPT;

     END CONTROL_LOOP;
1GETINPT:  PROCEDURE;

 /*********************************************************************/
 /*                                                                   */
 /* THIS PROCEDURE OBTAINS INPUT FROM SYSIN FILE.                     */
 /*                                                                   */
 /*********************************************************************/


 ON CONVERSION BEGIN; /* RECOVER AND OBTAIN INPUT */
     ANSW = ONSOURCE;
     UNSPEC(ANSW) = UNSPEC(ANSW) | (30) '01000000'B;
     ONSOURCE = (16) '0';
     END;

 ON UNDEFINEDFILE(SYSIN) BEGIN;
     PUT SKIP EDIT('NO SYSIN CONTROL FILE, DEFAULT ATTRIBUTES ASSUMED')
         (A);
     MORE_SYSIN = NO;
     GOTO END_GETINPT;
     END;

 ON ENDFILE(SYSIN) MORE_SYSIN = NO;

 GET FILE(SYSIN) LIST(NNN);
 IF NNN ª= 0
     THEN ANSW = ' ';
 PUT EDIT(SUBSTR(ANSW, 1, INDEX(ANSW, ' '))) (A);

 END_GETINPT:
 END GETINPT;
1HELP:  PROCEDURE;

 /*********************************************************************/
 /*                                                                   */
 /* THIS PROCEDURE LISTS THE HELP INFORMATION FOR THE USER.           */
 /*                                                                   */
 /*********************************************************************/


 DECLARE  HELP_TEXT(85)  CHAR(68) STATIC INIT(
 'RECON  by Clyde Thomas Zuber                                        ',
 '    This program allows the user to reconstruct data sets which have',
 'standard line numbers and have lost their original attributes, as in',
 'the case where a data set has been backed up or unloaded with some  ',
 'unknown or unavailable utility.                                     ',
 '                                                                    ',
 'If no commands are given the default is to search for 80 byte       ',
 'records with the line numbers in columns 73-80.  Please note that   ',
 'the principle this program works on it that the data set originally ',
 'had line numbers and that they are retained in the current data set.',
 'If the data set has no excess information (such as produced by a    ',
 'utility) but has merely had its attributes altered in some manner,  ',
 'then the author''s utility MODCOPY should be used instead.          ',
 '                                                                    ',
 'DDNAMES:  IN, OUT, SYSIN, SYSPRINT                                  ',
 'If SYSIN is undefined the file OUT receives the following DCB       ',
 'attributes:  DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)                   ',
 '                                                                    ',
 '                                                                    ',
 'Control Loop Commands                                               ',
 '=====================                                               ',
 '                                                                    ',
 'BLKSIZE number                                                      ',
 '    Specify output data set block size.                             ',
 '                                                                    ',
 'CANCEL                                                              ',
 '    No copy is performed.                                           ',
 '                                                                    ',
 'END                                                                 ',
 '    End control loop and begin copy.                                ',
 '                                                                    ',
 'EXCESS                                                              ',
 '    If VERIFY is also selected then only excess information         ',
 '    which contains capital letters is include with the OUT file.    ',
 '    Otherwise this command makes all the information in the IN file ',
 '    be included in the OUT file.                                    ',
 '                                                                    ',
 'FDRDSF                                                              ',
 '    For processing data sets which have been backed up with fdrdsf. ',
 '    This may be especially useful if the absolute track feature     ',
 '    was used and it is undesirable to restore with this feature.    ',
 '    This command is exclusive of the START command.                 ',
 '                                                                    ',
 'FINISH number                                                       ',
 '    Specify the last relative record to copy from the input data    ',
 '    set.                                                            ',
 '                                                                    ',
 'HELP                                                                ',
 '    Displays this text.                                             ',
 '                                                                    ',
 'IEHMOVE                                                             ',
 '    Processes data sets which have been unloaded with iehmove or    ',
 '    "sysmove" as it is refered to in the data set itself.  This     ',
 '    command is exclusive of the TRIM command.                       ',
 '                                                                    ',
 'LRECL number                                                        ',
 '    Specify the output data set logical record length.              ',
 '                                                                    ',
 'RECFM letters                                                       ',
 '    Specify output data set record format.                          ',
 '                                                                    ',
 'SEQLEN number                                                       ',
 '    Specify number of characters in sequence numbers contained in   ',
 '    data set.  Normally this value defaults to 8.                   ',
 '                                                                    ',
 'START number                                                        ',
 '    Specify first relative record to copy from input data set.      ',
 '                                                                    ',
 'TRIM col1 col2                                                      ',
 '    Use the input record from col1 to col2 columns to copy.         ',
 '                                                                    ',
 'VAR                                                                 ',
 '    The data set contains unloaded varying length records with each ',
 '    record prefixed by a length field which may be used to help     ',
 '    determine record boundaries.  The length field must be character',
 '    numerals like a sequence number.  SEQLEN defaults to 5.         ',
 '                                                                    ',
 'VERIFY                                                              ',
 '    Check excess information not contained in a logical record (as  ',
 '    determined from the position of the sequence number) for capital',
 '    letters.  If none are found the excess information is put out   ',
 '    onto the SYSPRINT file.  If some are found the EXCESS keyword   ',
 '    determines whether to include with the other records going to   ',
 '    the OUT file or to put it out on SYSPRINT.                      ',
 ' ');

 DO I = 1 TO HBOUND(HELP_TEXT, 1);
     PUT SKIP EDIT(HELP_TEXT(I)) (A);
     END;

 END HELP;
 END CONTROL;
 END RECON;
