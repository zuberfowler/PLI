*PROCESS NM;
 DSNISR:  PROCEDURE(PARM) OPTIONS(MAIN, REENTRANT) REORDER;

 DECLARE  PGMID   CHAR(34) VARYING STATIC EXTERNAL
    INIT('DSNISR V1.0  BY CLYDE THOMAS ZUBER');
 DECLARE  PLIXOPT CHAR(7) VARYING STATIC EXTERNAL INIT('ISA(4K)');

 /*********************************************************************/
 /*                                                                   */
 /* PUTS A DATA SET NAME PASSED AS A PARAMETER INTO THE ISPF PROFILE  */
 /* VARIABLES PRJ0 LIB0 TYP0.  THE DATA SET NAME IS ASSUMED TO BE     */
 /* IN TSO SYNTAX FORMAT.   NO SYNTAX CHECKING IS DONE.               */
 /*                                                                   */
 /*********************************************************************/


 DECLARE  PARM        CHAR(100) VARYING;

 DECLARE  ISPLINK     ENTRY OPTIONS(ASM, INTER, RETCODE);
 DECLARE  VDEFINE     CHAR(8) STATIC INIT('VDEFINE');
 DECLARE  VPUT        CHAR(4) STATIC INIT('VPUT');
 DECLARE  CHAR        CHAR(4) STATIC INIT('CHAR');
 DECLARE  LEN         FIXED BINARY(31) STATIC INIT(8);
 DECLARE  NO          BIT(1) STATIC INIT('0'B);
 DECLARE  YES         BIT(1) STATIC INIT('1'B);

 DECLARE  (INDEX, LENGTH, SUBSTR) BUILTIN;

 DECLARE  SEG(12)     CHAR(8) VARYING INIT((12)(1)'');
 DECLARE  S           FIXED BINARY;
 DECLARE  POS         FIXED BINARY;
 DECLARE  DONE        BIT(1) INIT('0'B);
 DECLARE  (I, J, K, L)  FIXED BINARY;

 DECLARE  N_PRJ0      CHAR(6) INIT('(PRJ0)') STATIC;
 DECLARE  PRJ0        CHAR(8);

 DECLARE  N_LIB0      CHAR(6) INIT('(LIB0)') STATIC;
 DECLARE  LIB0        CHAR(8);

 DECLARE  N_TYP0      CHAR(6) INIT('(TYP0)') STATIC;
 DECLARE  TYP0        CHAR(8);
1CALL ISPLINK(VDEFINE, N_PRJ0, PRJ0, CHAR, LEN);
 CALL ISPLINK(VDEFINE, N_LIB0, LIB0, CHAR, LEN);
 CALL ISPLINK(VDEFINE, N_TYP0, TYP0, CHAR, LEN);

 /* GET RID OF SURROUNDING QUOTES IF PRESENT */
 IF SUBSTR(PARM, 1, 1) = ''''
     THEN PARM = SUBSTR(PARM, 2);
 POS = INDEX(PARM, '''');
 IF POS ª= 0
     THEN SUBSTR(PARM, POS, 1) = ' ';

 /* DISECT THE PARM INTO UP TO THREE PARTS */
 DO S = 1 TO 12  WHILE(ªDONE);
     CALL SEGMENT(SEG(S));
     END;

 J = S - 1;

 /* GROUP LEVELS TOGETHER WHEN POSSIBLE AND IF NECESSARY */
 DO K = J TO 4 BY -1;
     DONE = NO;
     DO I = J TO 2 BY -1  WHILE(ªDONE);
         IF LENGTH(SEG(I-1)) + LENGTH(SEG(I)) < 8
             THEN DO;
                  SEG(I-1) = SEG(I-1) || '.' || SEG(I);
                  DO L = I TO 11;
                      SEG(L) = SEG(L+1);
                      END;
                  DONE = YES;
                  END;
         END;
         IF DONE
             THEN J = J - 1;
             ELSE LEAVE;
     END;

 PRJ0 = SEG(1);
 LIB0 = SEG(2);
 TYP0 = SEG(3);

 CALL ISPLINK(VPUT, N_PRJ0);
 CALL ISPLINK(VPUT, N_LIB0);
 CALL ISPLINK(VPUT, N_TYP0);
1SEGMENT:  PROCEDURE(SEG);

 /*********************************************************************/
 /*                                                                   */
 /* GET A SEGMENT FROM THE PARM AND REMOVE IT FROM THE PARM.  WHEN    */
 /* IT IS THE LAST SEGMENT OF THE DSN THEN SET "DONE" FLAG.           */
 /*                                                                   */
 /*********************************************************************/

 DECLARE  SEG  CHAR(*) VARYING;

 POS = INDEX(PARM, '.');
 IF POS = 0
     THEN DO;
          DONE = YES;
          SEG = PARM;
          END;
     ELSE DO;
          SEG = SUBSTR(PARM, 1, POS-1);
          PARM = SUBSTR(PARM, POS+1);
          END;

 END SEGMENT;

 END DSNISR;
